@use 'sass:list';

// Core mixins for lightGallery
// Note: Vendor prefixes are handled by Autoprefixer during build

// Animations
@mixin animation($animation) {
  animation: $animation;
}

@mixin animation-name($name) {
  animation-name: $name;
}

@mixin animation-duration($duration) {
  animation-duration: $duration;
}

@mixin animation-timing-function($timing-function) {
  animation-timing-function: $timing-function;
}

@mixin animation-delay($delay) {
  animation-delay: $delay;
}

@mixin animation-iteration-count($iteration-count) {
  animation-iteration-count: $iteration-count;
}

@mixin animation-direction($direction) {
  animation-direction: $direction;
}

@mixin animation-fill-mode($fill-mode) {
  animation-fill-mode: $fill-mode;
}

@mixin keyframes($name) {
  @keyframes #{$name} {
    @content;
  }
}

// Backface visibility
@mixin backface-visibility($visibility) {
  backface-visibility: $visibility;
}

// Box shadow
@mixin box-shadow($shadow...) {
  box-shadow: $shadow;
}

// Box sizing
@mixin box-sizing($boxmodel) {
  box-sizing: $boxmodel;
}

// CSS3 Content Columns
@mixin content-columns($column-count, $column-gap: $grid-gutter-width) {
  column-count: $column-count;
  column-gap: $column-gap;
}

// Optional hyphenation
@mixin hyphens($mode: auto) {
  word-wrap: break-word;
  hyphens: $mode;
}

// Transformations
@mixin scale($ratio...) {
  transform: scale($ratio);
}

@mixin scaleX($ratio) {
  transform: scaleX($ratio);
}

@mixin scaleY($ratio) {
  transform: scaleY($ratio);
}

@mixin skew($x, $y) {
  transform: skewX($x) skewY($y);
}

@mixin translate($x, $y) {
  transform: translate($x, $y);
}

@mixin translate3d($x, $y, $z) {
  transform: translate3d($x, $y, $z);
}

@mixin scale3d($x, $y, $z) {
  transform: scale3d($x, $y, $z);
}

@mixin rotate($degrees) {
  transform: rotate($degrees);
}

@mixin rotateX($degrees) {
  transform: rotateX($degrees);
}

@mixin rotateY($degrees) {
  transform: rotateY($degrees);
}

@mixin perspective($perspective) {
  perspective: $perspective;
}

@mixin perspective-origin($perspective) {
  perspective-origin: $perspective;
}

@mixin transform-origin($origin) {
  transform-origin: $origin;
}

@mixin transform($transforms) {
  transform: $transforms;
}

// Transitions
@mixin transition($transition...) {
  transition: $transition;
}

@mixin transition-property($transition-property...) {
  transition-property: $transition-property;
}

@mixin transition-delay($transition-delay) {
  transition-delay: $transition-delay;
}

@mixin transition-duration($transition-duration...) {
  transition-duration: $transition-duration;
}

@mixin transition-timing-function($timing-function) {
  transition-timing-function: $timing-function;
}

@mixin transition-transform($transition...) {
  transition: transform $transition;
}

// User select
// For selecting text on the page

@mixin user-select($select) {
  user-select: $select;
}

// Cursor grab
@mixin grab-cursor {
  cursor: grab;
}

@mixin grabbing-cursor {
  cursor: grabbing;
}

@mixin cursor-grab {
  cursor: grab;
}

@mixin cursor-grabbing {
  cursor: grabbing;
}

// Clearfix
@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

// Center block
@mixin center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

// Text truncate
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Text hide
@mixin text-hide {
  font: 0/0 a;
  color: transparent;
  text-shadow: none;
  background-color: transparent;
  border: 0;
}

// Opacity
@mixin opacity($opacity) {
  opacity: $opacity;
}

// Placeholder text
@mixin placeholder {
  &::placeholder {
    @content;
  }
}

// Responsive image
@mixin img-responsive($display: block) {
  display: $display;
  max-width: 100%;
  height: auto;
}

// Responsive utilities
@mixin responsive-visibility($parent) {
  #{$parent} {
    display: block !important;
  }
}

@mixin responsive-invisibility($parent) {
  #{$parent} {
    display: none !important;
  }
}

// Responsive utilities
@mixin responsive-utilities {
  @each $breakpoint in map-keys($grid-breakpoints) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    @include media-breakpoint-up($breakpoint) {
      .d#{$infix}-none {
        display: none !important;
      }

      .d#{$infix}-block {
        display: block !important;
      }

      .d#{$infix}-inline {
        display: inline !important;
      }

      .d#{$infix}-inline-block {
        display: inline-block !important;
      }
    }
  }
}

// Custom transition
@mixin transitionCustom($values...) {
  $transitions: (
  );

@each $declaration in $values {
  $prop: list.nth($declaration, 1);
  $prop-opts: (
  );
$length: list.length($declaration);

@if $length >=2 {
  @for $i from 2 through $length {
    $prop-opts: list.append($prop-opts, list.nth($declaration, $i));
  }
}

$trans: $prop, $prop-opts;
$transitions: list.append($transitions, $trans, comma);
}

transition: $values;
}